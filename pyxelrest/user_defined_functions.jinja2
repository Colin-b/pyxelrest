"""
This file was generated. DO NOT EDIT manually.
Source file: {{ self._TemplateReference__context.name }}
Generation date (UTC): {{ current_utc_time }}
"""
import xlwings as xw
import requests
import requests.exceptions
import datetime
import logging
import ujson
from collections import OrderedDict
{% if support_pandas %}
import pandas
{% endif %}
from definition_deserializer import Response
import definition_deserializer
import authentication

{% macro convert_to_return_type(str_value, method) %}
{% if 'application/json' in method['produces'] -%}
[{{ str_value }}]
{% else -%}
{{ str_value }}
{% endif %}
{% endmacro %}

{%- macro delete(service, method_path, contains_parameters, path_parameters, method) %}
{% if contains_parameters %}
    response = requests.delete('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), json=request_payload, params=request_parameters, headers=request_header, proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% else %}
    response = requests.delete('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% endif %}
{% endmacro -%}

{%- macro get(service, method_path, contains_parameters, path_parameters, method) %}
{% if contains_parameters %}
    response = requests.get('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), request_parameters, stream=True, headers=request_header, proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% else %}
    response = requests.get('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), stream=True, headers=request_header, proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% endif %}
{% endmacro -%}

{%- macro post(service, method_path, contains_parameters, path_parameters, method) %}
{% if contains_parameters %}
    response = requests.post('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), json=request_payload, params=request_parameters, files=request_files, headers=request_header, proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% else %}
    response = requests.post('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% endif %}
{% endmacro -%}

{%- macro put(service, method_path, contains_parameters, path_parameters, method) %}
{% if contains_parameters %}
    response = requests.put('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), json=request_payload, params=request_parameters, headers=request_header, proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% else %}
    response = requests.put('{{ service.uri }}{{ method_path }}'.format(
{% for path_parameter in path_parameters %}
        {{ path_parameter['name'] }}={{ path_parameter['name'] }}{% if not loop.last %}, {% endif %}
{% endfor %}
), proxies={{ service.proxy }}, timeout=({{ service.connect_timeout }}, {{ service.read_timeout }}))
{% endif %}
{% endmacro -%}

{% macro validate_parameter_value(parameter, method) %}
{% set param_name = parameter['name'] %}
{% set param_type = parameter['type'] %}
{# Integer Type check #}
{% if param_type == 'integer' -%}
        if not isinstance({{param_name}}, int):
            logging.error('{{ param_name }} must be an integer.')
{% if method['produces'] is table_result %}
            return ['{{ param_name }} must be an integer.']
{% else %}
            return '{{ param_name }} must be an integer.'
{% endif %}
{# Number Type check #}
{% elif param_type == 'number' -%}
        if not isinstance({{param_name}}, float):
            logging.error('{{ param_name }} must be a number.')
{% if method['produces'] is table_result %}
            return ['{{ param_name }} must be a number.']
{% else %}
            return '{{ param_name }} must be a number.'
{% endif %}
{# String Type check #}
{% elif param_type == 'string' %}
{% set param_format = parameter['format'] %}
{# String (date) Type check #}
{% if param_format == 'date' -%}
        if not isinstance({{param_name}}, datetime.date):
            logging.error('{{ param_name }} must be a date.')
{% if method['produces'] is table_result %}
            return ['{{ param_name }} must be a date.']
{% else %}
            return '{{ param_name }} must be a date.'
{% endif %}
{# String (date-time) Type check #}
{% elif param_format == 'date-time' -%}
        if not isinstance({{param_name}}, datetime.datetime):
            logging.error('{{ param_name }} must be a date time.')
{% if method['produces'] is table_result %}
            return ['{{ param_name }} must be a date time.']
{% else %}
            return '{{ param_name }} must be a date time.'
{% endif %}
{# String (non date or date-time) Type check #}
{% else %}
{% set param_enum = parameter['enum'] %}
{# String (enum) Type check #}
{% if param_enum|count > 0 -%}
        if {{param_name}} not in {{ param_enum }}:
            logging.error('{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_enum|join(" or ") }}.'.format({{ param_name }}))
{% if method['produces'] is table_result %}
            return ['{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_enum|join(" or ") }}.'.format({{ param_name }})]
{% else %}
            return '{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_enum|join(" or ") }}.'.format({{ param_name }})
{% endif %}
{% endif %}
{% endif %}
{# Boolean Type check #}
{% elif param_type == 'boolean' -%}
        if {{param_name}} not in ['true', 'false']:
            logging.error('{{ param_name }} must be either "true" or "false".')
{% if method['produces'] is table_result %}
            return ['{{ param_name }} must be either "true" or "false".']
{% else %}
            return '{{ param_name }} must be either "true" or "false".'
{% endif %}
        {{param_name}} = {{param_name}} == 'true'
{# Array Type check #}
{% elif param_type == 'array' -%}
{% set param_items = parameter['items'] %}
{% set param_items_type = param_items['type'] %}
{# Array (integers) Type check #}
{% if param_items_type == 'integer' -%}
        if isinstance({{param_name}}, list):
            {{param_name}} = [item for item in {{param_name}} if item is not None]
            for {{param_name}}_item in {{param_name}}:
                if not isinstance({{param_name}}_item, int):
                    logging.error('{{ param_name }} must contain integers.')
{% if method['produces'] is table_result %}
                    return ['{{ param_name }} must contain integers.']
{% else %}
                    return '{{ param_name }} must contain integers.'
{% endif %}
        else:
            if not isinstance({{param_name}}, int):
                logging.error('{{ param_name }} must be an integer.')
{% if method['produces'] is table_result %}
                return ['{{ param_name }} must be an integer.']
{% else %}
                return '{{ param_name }} must be an integer.'
{% endif %}
{# Array (numbers) Type check #}
{% elif param_items_type == 'number' -%}
        if isinstance({{param_name}}, list):
            {{param_name}} = [item for item in {{param_name}} if item is not None]
            for {{param_name}}_item in {{param_name}}:
                if not isinstance({{param_name}}_item, float):
                    logging.error('{{ param_name }} must contain numbers.')
{% if method['produces'] is table_result %}
                    return ['{{ param_name }} must contain numbers.']
{% else %}
                    return '{{ param_name }} must contain numbers.'
{% endif %}
        else:
            if not isinstance({{param_name}}, float):
                logging.error('{{ param_name }} must be a number.')
{% if method['produces'] is table_result %}
                return ['{{ param_name }} must be a number.']
{% else %}
                return '{{ param_name }} must be a number.'
{% endif %}
{# Array (strings) Type check #}
{% elif param_items_type == 'string' %}
{% set param_items_format = param_items['format'] %}
{# Array (string - date) Type check #}
{% if param_items_format == 'date' -%}
        if isinstance({{param_name}}, list):
            {{param_name}} = [item for item in {{param_name}} if item is not None]
            for {{param_name}}_item in {{param_name}}:
                if not isinstance({{param_name}}_item, datetime.date):
                    logging.error('{{ param_name }} must contain dates.')
{% if method['produces'] is table_result %}
                    return ['{{ param_name }} must contain dates.']
{% else %}
                    return '{{ param_name }} must contain dates.'
{% endif %}
        else:
            if not isinstance({{param_name}}, datetime.date):
                logging.error('{{ param_name }} must be a date.')
{% if method['produces'] is table_result %}
                return ['{{ param_name }} must be a date.']
{% else %}
                return '{{ param_name }} must be a date.'
{% endif %}
{# Array (string - date-time) Type check #}
{% elif param_items_format == 'date-time' -%}
        if isinstance({{param_name}}, list):
            {{param_name}} = [item for item in {{param_name}} if item is not None]
            for {{param_name}}_item in {{param_name}}:
                if not isinstance({{param_name}}_item, datetime.datetime):
                    logging.error('{{ param_name }} must contain date times.')
{% if method['produces'] is table_result %}
                    return ['{{ param_name }} must contain date times.']
{% else %}
                    return '{{ param_name }} must contain date times.'
{% endif %}
        else:
            if not isinstance({{param_name}}, datetime.datetime):
                logging.error('{{ param_name }} must be a date time.')
{% if method['produces'] is table_result %}
                return ['{{ param_name }} must be a date time.']
{% else %}
                return '{{ param_name }} must be a date time.'
{% endif %}
{# Array (string - non date or date-time) Type check #}
{% else %}
{% set param_items_enum = param_items['enum'] %}
{# Array (string - enum) Type check #}
{% if param_items_enum|count > 0 -%}
        if isinstance({{param_name}}, list):
            {{param_name}} = [item for item in {{param_name}} if item is not None]
            for {{param_name}}_item in {{param_name}}:
                if {{param_name}}_item not in {{ param_items_enum }}:
                    logging.error('{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_items_enum|join(" or ") }}.'.format({{ param_name }}_item))
{% if method['produces'] is table_result %}
                    return ['{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_items_enum|join(" or ") }}.'.format({{ param_name }}_item)]
{% else %}
                    return '{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_items_enum|join(" or ") }}.'.format({{ param_name }}_item)
{% endif %}
        else:
            if {{param_name}} not in {{ param_items_enum }}:
                logging.error('{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_items_enum|join(" or ") }}.'.format({{ param_name }}))
{% if method['produces'] is table_result %}
                return ['{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_items_enum|join(" or ") }}.'.format({{ param_name }})]
{% else %}
                return '{{ param_name }} value "{% raw %}{{% endraw %}0{% raw %}}{% endraw %}" should be {{ param_items_enum|join(" or ") }}.'.format({{ param_name }})
{% endif %}
{# End of Array (string - enum) Type check #}
{% endif %}
{# End of Array (string) Type check #}
{% endif %}
{% elif param_items_type == 'boolean' -%}
        if isinstance({{param_name}}, list):
            {{param_name}} = [item for item in {{param_name}} if item is not None]
            for {{param_name}}_item in {{param_name}}:
                if {{param_name}}_item not in ['true', 'false']:
                    logging.error('{{ param_name }} must be either "true" or "false".')
{% if method['produces'] is table_result %}
                    return ['{{ param_name }} must be either "true" or "false".']
{% else %}
                    return '{{ param_name }} must be either "true" or "false".'
{% endif %}
                else:
                    {{param_name}}_item = {{param_name}}_item == 'true'
        else:
            if {{param_name}} not in ['true', 'false']:
                logging.error('{{ param_name }} must contain "true" or "false".')
{% if method['produces'] is table_result %}
                return ['{{ param_name }} must contain "true" or "false".']
{% else %}
                return '{{ param_name }} must contain "true" or "false".'
{% endif %}
            {{param_name}} = {{param_name}} == 'true'
{# End of Array Type check #}
{% endif %}
{% endif %}
{% endmacro %}

{% macro validate_required_parameter(parameter, method) %}
{% set param_name = parameter['name'] %}
{% set param_in = parameter['in'] %}
{% set param_type = parameter['type'] %}
{% set server_param_name = param_name if param_name not in modified_parameters else modified_parameters[param_name] %}
    if {{ param_name }} is None or isinstance({{ param_name }}, list) and all(x is None for x in {{ param_name }}):
        logging.error('{{ param_name }} is required.')
{% if method['produces'] is table_result %}
        return ['{{ param_name }} is required.']
{% else %}
        return '{{ param_name }} is required.'
{% endif %}
    if {{ param_name }} is not None:
        {{ validate_parameter_value(parameter, method) }}
{% if param_in == 'query' %}
        request_parameters['{{ server_param_name }}'] = {{ param_name }}
{% elif param_in == 'body' %}
        request_payload = {{ param_name }}
{% elif param_in == 'formData' %}
    {% if param_type == 'file' %}
            request_files['{{ server_param_name }}'] = {{ param_name }}
    {% else %}
            request_payload['{{ server_param_name }}'] = {{ param_name }}
    {% endif %}
{% elif param_in == 'header' %}
        request_header['{{ server_param_name }}'] = {{ param_name }}
{% endif %}
{% endmacro %}

{% macro validate_path_parameter(parameter, method) %}
{% set param_name = parameter['name'] %}
    if {{ param_name }} is None or isinstance({{ param_name }}, list) and all(x is None for x in {{ param_name }}):
        logging.error('{{ param_name }} is required.')
{% if method['produces'] is table_result %}
        return ['{{ param_name }} is required.']
{% else %}
        return '{{ param_name }} is required.'
{% endif %}
{% endmacro %}

{% macro validate_optional_parameter(parameter, method) %}
{% set param_name = parameter['name'] %}
{% set param_in = parameter['in'] %}
{% set param_type = parameter['type'] %}
{% set server_param_name = param_name if param_name not in modified_parameters else modified_parameters[param_name] %}
    if {{ param_name }} is not None:
        {{ validate_parameter_value(parameter, method) }}
{% if param_in == 'query' %}
        request_parameters['{{ server_param_name }}'] = {{ param_name }}
{% elif param_in == 'body' %}
        request_payload = {{ param_name }}
{% elif param_in == 'formData' %}
    {% if param_type == 'file' %}
            request_files['{{ server_param_name }}'] = {{ param_name }}
    {% else %}
            request_payload['{{ server_param_name }}'] = {{ param_name }}
    {% endif %}
{% elif param_in == 'header' %}
        request_header['{{ server_param_name }}'] = {{ param_name }}
{% endif %}
{% endmacro %}

{# Macro generating the converter for the parameter if needed #}
{% macro param_converter(parameter) %}
{% set param_type = parameter['type'] %}
{%- if param_type == 'integer' %}
 numbers=int,
{%- elif param_type == 'number' %}
 numbers=float,
{%- elif param_type == 'string' %}
    {%- set param_format = parameter['format'] %}
    {%- if param_format == 'date' %}
 dates=datetime.date,
    {%- elif param_format == 'date-time' %}
 dates=datetime.datetime,
    {%- endif %}
{% endif %}
{% endmacro %}

{# Macro generating the UDF related to provided method #}
{% macro add_udf(service, method_path, method, request_macro) %}
{% if 'application/octet-stream' not in method['produces'] %}
{% set method_parameters = method['parameters'] %}
{% set help_url = extract_url(method['description']) %}
@xw.func(category='{{ service.name }}', call_in_wizard=False{% if help_url %}, help_file='{{ help_url }}'{% endif %})
{% for parameter in method_parameters %}
@xw.arg('{{ parameter['name'] }}',{{ param_converter(parameter) }} doc='{{ parameter['description']|replace('\'', '') }}')
{% endfor %}
{% if method['produces'] is table_result %}
@xw.ret(expand='table')
{% endif %}
{% set path_parameters = method_parameters|selectattr('in', 'equalto', 'path') %}
{% set nb_path_parameters = method_parameters|selectattr('in', 'equalto', 'path')|list|count %}
{% set required_parameters = method_parameters|selectattr('required')|rejectattr('in', 'equalto', 'path') %}
{% set nb_required_parameters = method_parameters|selectattr('required')|rejectattr('in', 'equalto', 'path')|list|count %}
{% set optional_parameters = method_parameters|rejectattr('required')|rejectattr('in', 'equalto', 'path') %}
{% set nb_optional_parameters = method_parameters|rejectattr('required')|rejectattr('in', 'equalto', 'path')|list|count %}
def {{ service.udf_prefix }}_{{ method['operationId'] }}(
    {%- for parameter in path_parameters %}{{ parameter['name'] }}{% if not loop.last or nb_required_parameters > 0 or nb_optional_parameters > 0 %}, {% endif %}{% endfor %}
    {%- for parameter in required_parameters %}{{ parameter['name'] }}{% if not loop.last or nb_optional_parameters > 0 %}, {% endif %}{% endfor %}
    {%- for parameter in optional_parameters %}{{ parameter['name'] }}=None{% if not loop.last %}, {% endif %}{% endfor %}):
{% if 'summary' in method and method['summary'] %}
    """{{ method['summary'] }}"""
{% endif %}
    logging.info("Calling {{ service.udf_prefix }}_{{ method['operationId'] }}...")
{% if 'application/msgpackpandas' in method['produces'] and support_pandas %}
    request_header = {'content-type':'application/msgpackpandas'}
{% elif 'application/json' in method['produces']  %}
    request_header = {'content-type':'application/json'}
{% else %}
    request_header = {}
{% endif %}
{% set contains_parameters = nb_required_parameters > 0 or nb_optional_parameters > 0 %}
{% if contains_parameters %}
    request_payload = {}
    request_files = {}
    request_parameters = {}

{% endif %}
{% set path_parameters = method_parameters|selectattr('in', 'equalto', 'path') %}
{% for parameter in path_parameters %}
{{ validate_path_parameter(parameter, method) }}
{% endfor %}
{% set required_parameters = method_parameters|selectattr('required')|rejectattr('in', 'equalto', 'path') %}
{% for parameter in required_parameters %}
{{ validate_required_parameter(parameter, method) }}
{% endfor %}
{% set optional_parameters = method_parameters|rejectattr('required')|rejectattr('in', 'equalto', 'path') %}
{% for parameter in optional_parameters %}
{{ validate_optional_parameter(parameter, method) }}
{% endfor %}

    response = None
    try:
{% set path_parameters = method_parameters|selectattr('in', 'equalto', 'path') %}
{% if method['security'] %}
        authentication.add_auth('{{ service.name }}', {{ method['security'] }}, request_header)
{% endif %}
    {{ request_macro(service, method_path, contains_parameters, path_parameters, method) }}
        response.raise_for_status()
        logging.info("Valid response received for {{ service.udf_prefix }}_{{ method['operationId'] }} ({0}).".format(response.request.url))
        if response.headers['content-type'] == 'application/json':
            all_responses = {{ service.responses(method['responses']) }}
            all_definitions = {{ service.definitions() }}
            response_text = response.text
            definition_deserializer.all_definitions = {}
            return Response(all_responses, response.status_code, all_definitions).rows(ujson.loads(response_text) if response_text != '' else response_text)
        elif response.headers['content-type'] == 'application/msgpackpandas':
            return msgpackpandas_as_list(response.content)
        else:
            return response.text[:255]
    except requests.exceptions.ConnectionError:
        logging.exception("Connection error occurred while calling {{ service.udf_prefix }}_{{ method['operationId'] }}.")
        return {{ convert_to_return_type("'Cannot connect to service. Please retry once connection is re-established.'", method) }}
    except Exception as error:
        if response:
            logging.exception("Error occurred while handling {{ service.udf_prefix }}_{{ method['operationId'] }} response: {0}.".format(response.text))
        else:
            logging.exception("Error occurred while calling {{ service.udf_prefix }}_{{ method['operationId'] }}.")
        return {{ convert_to_return_type('describe_error(response, error)', method) }}
    finally:
        if response:
            response.close()

{% endif %}
{% endmacro %}

{% for service in services %}
    {%- for method_path, methods in service.swagger['paths'].items() %}
        {%- if 'get' in service.methods -%}
            {%- if 'get' in methods -%}
                {%- if 'tags' not in methods['get'] or service.should_provide_tags(methods['get']['tags']) -%}
                    {{- add_udf(service, method_path, methods['get'], get) -}}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
        {%- if 'post' in service.methods -%}
            {%- if 'post' in methods -%}
                {%- if 'tags' not in methods['post'] or service.should_provide_tags(methods['post']['tags']) -%}
                    {{- add_udf(service, method_path, methods['post'], post) -}}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
        {%- if 'put' in service.methods -%}
            {%- if 'put' in methods -%}
                {%- if 'tags' not in methods['put'] or service.should_provide_tags(methods['put']['tags']) -%}
                    {{- add_udf(service, method_path, methods['put'], put) -}}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
        {%- if 'delete' in service.methods -%}
            {%- if 'delete' in methods -%}
                {%- if 'tags' not in methods['delete'] or service.should_provide_tags(methods['delete']['tags']) -%}
                    {{- add_udf(service, method_path, methods['delete'], delete) -}}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
    {%- endfor %}
{% endfor %}

def msgpackpandas_as_list(msgpack_pandas):
{% if support_pandas %}
    logging.debug('Converting message pack pandas to list...')
    data = pandas.read_msgpack(msgpack_pandas)
    logging.debug('Converting dictionary to list...')
    flatten_data = [data.columns.values.tolist()] + data.values.tolist()
    logging.debug('Data converted to list.')
    return flatten_data
{% else %}
    logging.warning('Pandas module is required to decode response.')
    return ['Please install pandas module to be able to decode result.']
{% endif %}


def describe_error(response, error):
    if response:
        return 'An error occurred: "{0}" for value "{1}"'.format(str(error)[:66], response.text[:155])
    return str(error)[:255]
